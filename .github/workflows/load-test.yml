name: Load Test
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      env:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  API_URL: ${{ inputs.env == 'production' && 'https://api.marketoflow.com' || 'https://staging.marketoflow.com' }}
  API_TOKEN: ${{ secrets.API_TOKEN }}
  K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

jobs:
  performance-test:
    name: Run Load Test - ${{ inputs.env || 'staging' }}
    runs-on: ubuntu-latest
    container: grafana/k6

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate environment
        run: |
          if [ -z "$API_TOKEN" ]; then
            echo "::error::API_TOKEN not configured!"
            exit 1
          fi
          echo "âœ” Using environment: $API_URL"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run performance test
        id: k6-test
        run: |
          k6 run tests/performance/loadTest.js \
            --env API_URL="$API_URL" \
            --env API_TOKEN="$API_TOKEN" \
            --vus ${{ inputs.env == 'production' && '200' || '100' }} \
            --duration ${{ inputs.env == 'production' && '10m' || '5m' }} \
            ${{ env.K6_CLOUD_TOKEN && '--out cloud' || '' }} \
            --out json=test_results.json \
            --summary-export=summary.json

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: k6-results-${{ github.run_id }}-${{ inputs.env || 'staging' }}
          path: |
            test_results.json
            summary.json

      - name: Check thresholds
        run: |
          echo "Test summary:"
          jq '.metrics | {
            checks_pass_rate: .checks.values.pass,
            http_failure_rate: .http_req_failed.values.rate,
            avg_duration_ms: .http_req_duration.values.avg,
            p95_duration_ms: .http_req_duration.values."p(95)"
          }' summary.json

      - name: Fail if thresholds not met
        if: ${{ failure() }}
        run: |
          echo "::error::Performance thresholds not met"
          exit 1